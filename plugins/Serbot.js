const fs = require("fs");
const path = require("path");
const { Boom } = require("@hapi/boom");
const pino = require("pino");
const QRCode = require("qrcode");
const {
  default: makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  makeCacheableSignalKeyStore,
  DisconnectReason,
} = require("@whiskeysockets/baileys");

const { subBots, socketEvents, reconnectionAttempts } = require("../indexsubbots");

const MAX_SUBBOTS = 200;

const handler = async (msg, { conn, command, sock }) => {
  const usarPairingCode = ["sercode", "code"].includes(command);
  let sentCodeMessage = false;

  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  async function serbot() {
    const number = msg.key?.participant || msg.key.remoteJid;
    const sessionDir = path.join(__dirname, "../subbots");
    const sessionPath = path.join(sessionDir, number);
    const rid = number.split("@")[0];
    try {
      if (subBots.includes(sessionPath)) {
        return await conn.sendMessage(
          msg.key.remoteJid,
          {
            text: "‚ÑπÔ∏è *Ese subbot ya existe.* üßπ Usa *.delbots* para borrar tu sesi√≥n actualüîÅ Luego pide un nuevo c√≥digo con: *.code* o *.sercode*.",
          },
          { quoted: msg },
        );
      }

      subBots.push(sessionPath);

      /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ VERIFICACI√ìN DE L√çMITE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
      if (!fs.existsSync(sessionDir)) {
        fs.mkdirSync(sessionDir, { recursive: true });
      }

      const subbotDirs = fs
        .readdirSync(sessionDir)
        .filter((d) => fs.existsSync(path.join(sessionDir, d, "creds.json")));

      if (subbotDirs.length >= MAX_SUBBOTS) {
        await conn.sendMessage(
          msg.key.remoteJid,
          {
            text: `üö´ *L√≠mite alcanzado:* existen ${subbotDirs.length}/${MAX_SUBBOTS} sesiones de sub-bot activas.\nVuelve a intentarlo m√°s tarde.`,
          },
          { quoted: msg },
        );
        return;
      }
      const restantes = MAX_SUBBOTS - subbotDirs.length;
      await conn.sendMessage(
        msg.key.remoteJid,
        {
          text: `‚ÑπÔ∏è Quedan *${restantes}* espacios disponibles para conectar nuevos sub-bots.`,
        },
        { quoted: msg },
      );
      /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

      await conn.sendMessage(msg.key.remoteJid, { react: { text: "‚åõ", key: msg.key } });

      let socky;
      async function createSocket() {
        const { state, saveCreds } = await useMultiFileAuthState(sessionPath);
        const { version } = await fetchLatestBaileysVersion();
        const logger = pino({ level: "silent" });

        socky = makeWASocket({
          version,
          logger,
          auth: {
            creds: state.creds,
            keys: makeCacheableSignalKeyStore(state.keys, logger),
          },
          printQRInTerminal: !usarPairingCode,
          browser: ["Windows", "Chrome"],
          syncFullHistory: false,
        });

        return { socky, saveCreds };
      }

      let readyBot = false;
      let connectionTimeout;

      async function setupSocketEvents() {
        const { socky, saveCreds } = await createSocket();

        connectionTimeout = setTimeout(async () => {
          if (!readyBot) {
            await conn.sendMessage(
              msg.key.remoteJid,
              {
                text: "‚è∞ *Tiempo de espera agotado.*\nNo se escane√≥ el c√≥digo a tiempo. Vuelve a intentarlo.",
              },
              { quoted: msg },
            );

            const index = subBots.indexOf(sessionPath);
            if (index !== -1) subBots.splice(index, 1);

            socky.end(new Error("Timeout"));
            if (fs.existsSync(sessionPath)) {
              fs.rmSync(sessionPath, { recursive: true, force: true });
            }
          }
        }, 60000);

        socky.ev.on("connection.update", async ({ qr, connection, lastDisconnect }) => {
          if (qr && !sentCodeMessage) {
            if (usarPairingCode) {
              const code = await socky.requestPairingCode(rid);
              await conn.sendMessage(
                msg.key.remoteJid,
                {
                  video: { url: "https://cdn.russellxz.click/b0cbbbd3.mp4" },
                  caption:
                    "üîê *C√≥digo generado:*\nAbre WhatsApp > Vincular dispositivo y pega el siguiente c√≥digo:",
                  gifPlayback: true,
                },
                { quoted: msg },
              );
              await sleep(1000);
              await conn.sendMessage(
                msg.key.remoteJid,
                { text: `\`\`\`${code}\`\`\`` },
                { quoted: msg },
              );
            } else {
              const qrImage = await QRCode.toBuffer(qr);
              await conn.sendMessage(
                msg.key.remoteJid,
                {
                  image: qrImage,
                  caption:
                    "üì≤ Escanea este c√≥digo QR desde *WhatsApp > Vincular dispositivo* para conectarte como sub-bot.",
                },
                { quoted: msg },
              );
            }
            sentCodeMessage = true;
          }

          if (connection === "open") {
            readyBot = true;
            clearTimeout(connectionTimeout);
            reconnectionAttempts.set(sessionPath, 0);
            await conn.sendMessage(
              msg.key.remoteJid,
              {
                text: `‚ï≠‚îÄ„Äî ü§ñ ùó¶ùó®ùóïùóïùó¢ùóß ùóñùó¢ùó°ùóòùóñùóßùóîùóóùó¢ - ùó¶ùó¨ùóî ùóßùóòùóîùó† ùóïùó¢ùóß „Äï‚îÄ‚ïÆ

‚úÖ *Bienvenido al sistema de SYA TEAM BOT*
üõ∞Ô∏è Tu subbot ya est√° *en l√≠nea y operativo*

‚ï≠‚îÄ‚îÄ‚îÄ„Äò üì© IMPORTANTE „Äô‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ Revisa tu privado üì•
‚îÇ Ah√≠ est√°n las instrucciones üß†
‚îÇ *Si no entiendes...*
‚îÇ _eres un pndj xd_
‚îÇ _... un gran bobo _
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üõ†Ô∏è *Comandos b√°sicos:*
‚Ä¢ \`menu\` ‚Üí Ver comandos
‚Ä¢ \`help\` ‚Üí Ayuda general

‚öôÔ∏è *Modo actual:* Privado üîí
‚òëÔ∏è Solo t√∫ puedes usar el bot por ahora
üëÄ Mira tu privado para que otros tambi√©n lo usen

‚ú® *Cambiar prefijo:*
‚Ä¢ Usa: \`.setprefix ‚ú®\`
‚Ä¢ Luego ser√° as√≠: \`‚ú®menu\`, \`‚ú®play\`, etc.

üßπ *Eliminar sesi√≥n:*
‚Ä¢ \`.delbots\` para cerrar
‚Ä¢ Luego: \`.code\` o \`.sercode\` para nuevo acceso

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé Desarrollado por SYA TEAM üíé
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
              },
              { quoted: msg },
            );
            await conn.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
            const ownerJid = `${socky.user.id.split(":")[0]}@s.whatsapp.net`;
            socky
              .sendMessage(ownerJid, {
                text: `‚ï≠‚îÄ‚îÄ‚îÄ‚ú¶ ùó¶ùó¨ùóî ùóßùóòùóîùó† ùóïùó¢ùóß ‚ú¶‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ü§ñ SubBot Activo
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚ú® *Estado:* Tu bot ya est√° *en l√≠nea y conectado*.

üìå *IMPORTANTE*:
‚Äî Por defecto responde *solo a ti* en privado.

üì£ *¬øQuieres que funcione en grupos?*
üîπ Ve al grupo que quieras.
üîπ Escribe: \`.addgrupo\`
üîπ ¬°Y listo! Responder√° a todos.

üë§ *¬øQuieres que responda a otros en privado?*
üî∏ Usa: \`.addlista n√∫mero\`
    Ej: \`.addlista 504987654321\`
üî∏ O responde un mensaje con: \`.addlista\`

üõ†Ô∏è *¬øQuer√©s cambiar el prefijo?*
üî∏ Escribe: \`.setprefix s√≠mbolo\`
    Ej: \`.setprefix üê∫\`
üî∏ Luego usar√°s: üê∫menu, üê∫play, etc.

üìö *Ver comandos disponibles:*
Escribe: \`.menu\` o \`.help\`

üöÄ Potencia tu experiencia con SYA TEAM BOT.
‚öôÔ∏è Control total y estilo profesional.
`,
              })
              .catch(() => {
                return;
              });
            await socketEvents(socky);
          }

          if (connection === "close") {
            clearTimeout(connectionTimeout);
            const statusCode = new Boom(lastDisconnect?.error)?.output?.statusCode;
            console.log(`‚ùå Subbot ${sessionPath} desconectado (status: ${statusCode}).`);

            const shouldReconnect =
              statusCode !== DisconnectReason.loggedOut &&
              statusCode !== DisconnectReason.badSession &&
              statusCode !== DisconnectReason.forbidden &&
              statusCode !== 403;

            if (shouldReconnect) {
              const attempts = (reconnectionAttempts.get(sessionPath) || 0) + 1;
              reconnectionAttempts.set(sessionPath, attempts);

              if (attempts <= 3) {
                console.log(`üí± Intentando reconectar! (Intento ${attempts}/3)`);
                if (!readyBot && statusCode !== DisconnectReason.restartRequired) {
                  await conn.sendMessage(
                    msg.key.remoteJid,
                    {
                      text: `‚ï≠‚îÄ‚îÄ‚îÄ„Äî *‚ö†Ô∏è SUBBOT* „Äï‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ
‚îÇ‚ö†Ô∏è *Problema de conexi√≥n detectado:*
‚îÇ Raz√≥n: ${statusCode}
‚îÇ Intentando reconectar...
‚îÇ
‚îÇ üîÑ Si el problema persiste, ejecuta:
‚îÇ #delbots
‚îÇ para eliminar tu sesi√≥n y solicita una nueva con:
‚îÇ #sercode / #code
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶ *Sky Ultra Plus* ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`,
                    },
                    { quoted: msg },
                  );
                }
                const index = subBots.indexOf(sessionPath);
                if (index !== -1) subBots.splice(index, 1);

                setTimeout(() => {
                  if (fs.existsSync(sessionPath)) {
                    subBots.push(sessionPath);
                    setupSocketEvents().catch((e) => console.error("Error en reconexi√≥n:", e));
                  } else {
                    console.log(`‚ÑπÔ∏è La sesi√≥n ${sessionPath} fue eliminada. Cancelando reconexi√≥n.`);
                    reconnectionAttempts.delete(sessionPath);
                  }
                }, 3000);
              } else {
                console.log(
                  `‚ùå L√≠mite de reconexi√≥n alcanzado para ${sessionPath}. Eliminando sesi√≥n.`,
                );
                await conn.sendMessage(
                  msg.key.remoteJid,
                  {
                    text: `‚ö†Ô∏è *L√≠mite de reconexi√≥n alcanzado.*\nLa sesi√≥n ha sido eliminada. Usa ${global.prefix}sercode para volver a conectar.`,
                  },
                  { quoted: msg },
                );

                const index = subBots.indexOf(sessionPath);
                if (index !== -1) subBots.splice(index, 1);

                if (fs.existsSync(sessionPath)) {
                  fs.rmSync(sessionPath, { recursive: true, force: true });
                }
                reconnectionAttempts.delete(sessionPath);
              }
            } else {
              console.log(`‚ùå No se puede reconectar con el bot ${sessionPath}.`);
              if (!readyBot) {
                await conn.sendMessage(
                  msg.key.remoteJid,
                  {
                    text: `‚ö†Ô∏è *Sesi√≥n eliminada.*\n${statusCode}\nUsa ${global.prefix}sercode para volver a conectar.`,
                  },
                  { quoted: msg },
                );
              }
              const index = subBots.indexOf(sessionPath);
              if (index !== -1) subBots.splice(index, 1);
              if (fs.existsSync(sessionPath)) {
                fs.rmSync(sessionPath, { recursive: true, force: true });
              }
            }
          }
        });

        socky.ev.on("creds.update", saveCreds);
      }

      await setupSocketEvents();
    } catch (e) {
      console.error("‚ùå Error en serbot:", e);

      const index = subBots.indexOf(sessionPath);
      if (index !== -1) {
        subBots.splice(index, 1);
      }
      await conn.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *Error inesperado:* ${e.message}` },
        { quoted: msg },
      );
    }
  }

  await serbot();
};

handler.command = ["sercode", "code", "jadibot", "serbot", "qr"];
handler.tags = ["owner"];
handler.help = ["serbot", "code"];
module.exports = handler;
